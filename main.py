import os
import telebot
import openai
from flask import Flask, request

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN not set in environment variables")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY not set in environment variables")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
openai.api_key = OPENAI_API_KEY
app = Flask(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route('/', methods=['GET'])
def index():
    return 'LookStylist bot is live', 200

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Webhook
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Unsupported Media Type', 415

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, "üëó –ü—Ä–∏–≤–µ—Ç! –Ø LookStylist. –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–¥–µ—Ç—å ‚Äî —è –ø–æ–¥—Å–∫–∞–∂—É —Å—Ç–∏–ª—å üß†üõç.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_all(message):
    prompt = f"üë§ –Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å. –•–æ—á—É —Å–æ–≤–µ—Ç –ø–æ –æ–¥–µ–∂–¥–µ. –í–æ—Ç –º–æ–π –∑–∞–ø—Ä–æ—Å: {message.text}. –ü–æ–¥—Å–∫–∞–∂–∏ –∫–∞–∫ —Å—Ç–∏–ª–∏—Å—Ç."
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=150,
            temperature=0.7,
        )
        reply = response.choices[0].message["content"]
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ –æ—Ç OpenAI: {str(e)}"
    bot.send_message(message.chat.id, reply)

# –ó–∞–ø—É—Å–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
